<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>The world wide web, AI, me and my learnings!</title><link>https://blog.rawlani.com/</link><description>Recent content on The world wide web, AI, me and my learnings!</description><generator>Hugo -- 0.145.0</generator><language>en-us</language><lastBuildDate>Thu, 10 Apr 2025 12:49:17 +0530</lastBuildDate><atom:link href="https://blog.rawlani.com/index.xml" rel="self" type="application/rss+xml"/><item><title>LXC vs. LXD: Understanding the Differences and Choosing the Right Tool</title><link>https://blog.rawlani.com/posts/lxc-vs-lxd/</link><pubDate>Thu, 10 Apr 2025 12:49:17 +0530</pubDate><guid>https://blog.rawlani.com/posts/lxc-vs-lxd/</guid><description>&lt;h1 id="lxc-vs-lxd-understanding-the-differences-and-choosing-the-right-tool">LXC vs. LXD: Understanding the Differences and Choosing the Right Tool&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Linux containers have revolutionized how we deploy and manage applications, offering a lightweight alternative to virtual machines. But with tools like &lt;em>LXC (Linux Containers)&lt;/em> and &lt;em>LXD (Linux Container Daemon)&lt;/em>, choosing the right one can be confusing. &lt;em>Did you know that while both are based on Linux kernel features, LXD builds on LXC for a more user-friendly experience?&lt;/em> In this post, we&amp;rsquo;ll explore what LXC and LXD are, how they differ, and when to use each. By the end, you&amp;rsquo;ll have a clear understanding to make an informed decision for your projects.&lt;/p></description></item><item><title>Yourls K8s Installation Guide</title><link>https://blog.rawlani.com/posts/yourls-k8s-installation-guide/</link><pubDate>Sat, 05 Apr 2025 04:27:19 +0530</pubDate><guid>https://blog.rawlani.com/posts/yourls-k8s-installation-guide/</guid><description>&lt;h1 id="installing-yourls-on-kubernetes">Installing YOURLS on Kubernetes&lt;/h1>
&lt;p>This guide walks through the process of deploying YOURLS (Your Own URL Shortener) on a Kubernetes cluster using Helm.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>A working Kubernetes cluster&lt;/li>
&lt;li>Helm installed on your machine&lt;/li>
&lt;li>Basic knowledge of Kubernetes concepts&lt;/li>
&lt;li>A domain name pointed to your cluster&amp;rsquo;s ingress controller (we&amp;rsquo;ll use &lt;code>go.example.com&lt;/code> in this guide)&lt;/li>
&lt;/ul>
&lt;h2 id="installation-steps">Installation Steps&lt;/h2>
&lt;h3 id="1-create-a-namespace-for-yourls">1. Create a Namespace for YOURLS&lt;/h3>
&lt;p>First, create a dedicated namespace for YOURLS:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl create namespace yourls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-configure-values-for-yourls">2. Configure Values for YOURLS&lt;/h3>
&lt;p>Create a &lt;code>values.yaml&lt;/code> file with the following configuration:&lt;/p></description></item></channel></rss>